generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int      @id @default(autoincrement())
  email     String   @unique
  username  String   @unique
  password  String
  bio       String?  @default("")
  image     String?  @default("")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt @default(now())

  articles  Article[] @relation("UserArticles")
  favorites Article[] @relation("UserFavorites")

  following UserFollow[] @relation("Following")
  followers UserFollow[] @relation("Followers")

  comments  Comment[]
}

model Article {
  id             Int        @id @default(autoincrement())
  slug           String     @unique
  title          String
  description    String
  body           String
  createdAt      DateTime   @default(now())
  updatedAt      DateTime   @updatedAt
  authorId       Int
  author         User       @relation("UserArticles", fields: [authorId], references: [id], onDelete: Cascade)
  favoritedBy    User[]     @relation("UserFavorites")
  tagList        Tag[]      @relation("ArticleTags")
  comments       Comment[] 
}

model UserFollow {
  follower   User @relation("Following", fields: [followerId], references: [id])
  followerId Int
  following  User @relation("Followers", fields: [followingId], references: [id])
  followingId Int
  createdAt  DateTime @default(now())
  @@id([followerId, followingId])
}

model Tag {
  id        Int       @id @default(autoincrement())
  name      String    @unique
  articles  Article[] @relation("ArticleTags")
}

model Comment {
  id        Int      @id @default(autoincrement())
  body      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  author    User     @relation(fields: [authorId], references: [id], onDelete: Cascade)
  authorId  Int

  article   Article  @relation(fields: [articleId], references: [id], onDelete: Cascade)
  articleId Int
}





